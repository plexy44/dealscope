
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview An AI agent that provides a trust score for the seller and a rarity assessment of the item.
 *
 * - analyzeItem - A function that handles the item analysis process.
 * - AnalyzeItemInput - The input type for the analyzeItem function.
 * - AnalyzeItemOutput - The return type for the analyzeItem function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeItemInputSchema = z.object({
  title: z.string().describe('The title of the item.'),
  description: z.string().describe('The description of the item.'),
  sellerRating: z.string().describe('The seller rating on eBay.'),
  itemCondition: z.string().describe('The condition of the item (e.g., New, Used).'),
});
export type AnalyzeItemInput = z.infer<typeof AnalyzeItemInputSchema>;

const AnalyzeItemOutputSchema = z.object({
  riskScore: z.number().min(0).max(10).describe('A score between 0 and 10 indicating the risk associated with the seller and item (lower is better).'),
  rarityScore: z.number().min(0).max(10).describe('A score between 0 and 10 indicating the rarity of the item (higher is better).'),
});
export type AnalyzeItemOutput = z.infer<typeof AnalyzeItemOutputSchema>;

export async function analyzeItem(input: AnalyzeItemInput): Promise<AnalyzeItemOutput> {
  return analyzeItemFlow(input);
}

const analyzeItemPrompt = ai.definePrompt({
  name: 'analyzeItemPrompt',
  input: {schema: AnalyzeItemInputSchema},
  output: {schema: AnalyzeItemOutputSchema},
  prompt: `You are an AI assistant helping users evaluate eBay listings. Analyze the following item details to determine the risk associated with the purchase and the item's rarity.

Item Title: {{{title}}}
Item Description: {{{description}}}
Seller Rating: {{{sellerRating}}}
Item Condition: {{{itemCondition}}}

Provide a riskScore (a number between 0 and 10, where lower is better) based on the seller rating, item condition, and description.
Also provide a rarityScore (a number between 0 and 10, where higher is better) based on the item title and description, considering factors like brand, model, and potential scarcity.

Ensure that the riskScore and rarityScore are numbers between 0 and 10 inclusive.
`,
});

const analyzeItemFlow = ai.defineFlow(
  {
    name: 'analyzeItemFlow',
    inputSchema: AnalyzeItemInputSchema,
    outputSchema: AnalyzeItemOutputSchema,
  },
  async (input): Promise<AnalyzeItemOutput> => {
    const {output, usage} = await analyzeItemPrompt(input);

    if (!output) {
      console.error('[analyzeItemFlow] AI prompt did not return a valid output structure.', {inputDetails: {title: input.title.substring(0,50), condition: input.itemCondition}, usage});
      throw new Error('AI analysis failed to produce an output.');
    }

    // Zod schema validation for output is handled by Genkit when defining the prompt.
    // This is an additional safeguard if the schema validation somehow doesn't prevent invalid types.
    if (typeof output.riskScore !== 'number' || typeof output.rarityScore !== 'number') {
        console.error('[analyzeItemFlow] AI output scores are not valid numbers despite schema. Output received:', output);
        throw new Error('AI analysis returned invalid score types.');
    }
    
    return output;
  }
);

